#!/usr/bin/env python
import argparse
import logging
import operator
import datetime
import os
import pkg_resources

from jinja2 import FileSystemLoader, Environment
from reviewrot.mailer import Mailer
from reviewrot import GerritService, get_git_service
from reviewrot import get_arguments, load_config_file
from reviewrot.basereview import BaseReview
from reviewrot.irc import IRC

try:
    import urllib.parse as urllib  # Python 3
except ImportError:
    import urllib  # Python 2

format_duration = BaseReview.format_duration

log = logging.getLogger(__name__)

# Characters to include at the beginning and end of reports
report_prefixes = {'oneline': '', 'indented': '', 'json': '['}
report_suffixes = {'oneline': '', 'indented': '', 'json': ']'}


def main(cli_args, valid_choices):
    """
    Reads input configuration file.
    Calls appropriate git service with suitable inputs.
    Args:
        cli_args (argparse.Namespace): Arguments provided by command line
                                       interface
        valid_choices (dict): valid values of choices for arguments
    """
    config = load_config_file(cli_args.config)

    arguments = get_arguments(
        cli_args,
        config,
        valid_choices
    )

    if arguments.get('debug'):
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    results = []
    for item in config.get('git_services', []):
        if 'type' not in item:
            log.debug('git service type not found for %s', item)
            raise KeyError('git service not found for %s' % item)

        # get git service
        git_service = get_git_service(item['type'])

        """
        check if username and/or repository information is given for
        specified git service
        """
        if item['repos'] is not None:
            # for each input call specified git service
            for data in item['repos']:
                """
                split and format username and repository name to further
                request pull requests
                """
                res = format_user_repo_name(data, git_service)
                """
                get pull/merge/change requests for specified git service
                """
                token = item.get('token')
                # Support pulling a token from an environment variable
                # If the token value starts with "ENV.", then the value
                # for the token will be pulled from the environment variable
                # specified following "ENV."
                # For example, if the token value specified in the config is
                # "ENV.FOO", then the real value for the environment variable
                # will be taken from the environment variable "FOO"
                if token and token.startswith('ENV.'):
                    token_env_var = token.split('ENV.')[1]
                    token = os.environ.get(token_env_var)
                results.extend(
                    git_service.request_reviews(
                        user_name=res.get('user_name'),
                        repo_name=res.get('repo_name'),
                        state_=arguments.get('state'),
                        value=arguments.get('value'),
                        duration=arguments.get('duration'),
                        show_last_comment=arguments.get('show_last_comment'),
                        token=token,
                        host=remove_trailing_slash_from_url(item.get('host')),
                        ssl_verify=arguments.get('ssl_verify'),
                    )
                )

    # With the --sort argument, --comment-sort is kept for backwards
    # compatibility. Equivalent to --sort commented
    if arguments.get('comment_sort'):
        arguments['sort'] = 'commented'

    # Now, with all results in place, sort them and print
    # If sort is not passed or not provided as configuration argument, use the
    # first element of the sort choices list as default.
    sort_by = arguments.get('sort', choices['sort'][0])

    if sort_by == 'commented':
        sorting_key = sort_by_last_comment
    else:
        sort_index = {
            'submitted': 'time',
            'updated': 'updated_time',
        }
        sort_attr = sort_index.get(sort_by)

        # As sort_index has to be explicitly matched, ensure that is kept in
        # sync with sort choices list.
        if sort_attr is None:
            error_message = 'Sort by {} not supported'.format(sort_by)
            log.debug(error_message)
            raise ValueError(error_message)

        sorting_key = operator.attrgetter(sort_attr)

    sorted_results = sorted(
        results,
        key=sorting_key,
        reverse=arguments.get('reverse'),
    )
    formatting = arguments.get('format', 'oneline')

    email = arguments.get('email')
    if email:
        mailer_configuration = config.get('mailer')
        log.debug('SENDING MAIL')

        loader = FileSystemLoader(
            searchpath=pkg_resources.resource_filename('reviewrot', ''))
        env = Environment(loader=loader)
        env.filters['formatduration'] = format_duration
        template = env.get_template('html_template.jinja')

        output_text = template.render({
            "results": sorted_results,
            'show_last_comment': arguments.get('show_last_comment'),
        })

        mailer = Mailer(
            sender=mailer_configuration['sender'],
            server=mailer_configuration['server']
        )
        mailer.send(
            email,
            'review-rot notification',
            output_text
        )
        log.debug('EMAIL SENT')

    irc = arguments.get('irc')
    if irc and sorted_results:
        irc_bot = IRC(config=config.get('irc'), channels=irc)
        irc_bot.connect()

        # x02 is for bold formatting in irc
        irc_bot.send_msg(
            '\x02{0} Code Review Reminder {0}\x02'.format('-' * 45)
        )
        # output maximum 20 merge requests
        for result in sorted_results[:20]:
            irc_bot.send_msg(result.format(style="irc"))

        if len(sorted_results) > 20:
            irc_bot.send_msg(
                '----- there are more than 20 MR,'
                ' if you want to see all of them please'
                ' use -- email configuration ----'
            )

        irc_bot.send_msg(
            '\x02{}\x02'.format('-' * 112)
        )
        irc_bot.quit()

    if not email and not irc:
        print(report_prefixes[formatting])
        for i, result in enumerate(sorted_results):
            print(result.format(
                style=formatting, i=i, N=len(results),
                show_last_comment=arguments.get('show_last_comment')))
        print(report_suffixes[formatting])


def sort_by_last_comment(result):
    """
    Helper function for sorting by last comment date

    Args:
        result (reviewrot.basereview.Basereview):
        Instance containing data about review

    Returns:
        last comment date (datetime.datetime): when available or
        default datetime.datetime with MAX value
    """

    if result.last_comment:
        return result.last_comment.created_at
    # if result does not contain last comment, return default datetime
    # with maximum value
    return datetime.datetime.combine(datetime.date.max,
                                     datetime.datetime.min.time())


def remove_trailing_slash_from_url(url):
    """
    Helper function for removing trailing slash from url

    Args:
        url (string): url

    Returns:
        url (string) url without trailing slash
    """
    if url:
        if url.endswith('/'):
            return url[:-1]
        return url


def format_user_repo_name(data, git_service):
    """
    Takes input from configuration file for a specified git service.
    Split or format it as required.
    Args:
        data (str): combination of username and/or reponame
        git_service (BaseService) : Git service object
    Returns:
        Dictionary representation of username and reponame
    """
    user_name = None
    repo_name = None

    if isinstance(git_service, GerritService):
        # convert "/" if any into escape character for html request
        repo_name = urllib.quote_plus(data)
    elif '/' in data:
        # Splitting only once in case "/" is a valid character in the data.
        user_name, repo_name = data.split('/', 1)
    else:
        user_name = data

    return {'user_name': user_name, 'repo_name': repo_name}


if __name__ == '__main__':

    duration_choices = ['y', 'm', 'd', 'h', 'min']
    state_choices = ['older', 'newer']
    format_choices = ['oneline', 'indented', 'json']

    choices = {
        'duration': duration_choices,
        'state': state_choices,
        'format': format_choices,
        'sort': ['submitted', 'updated', 'commented'],
    }

    parser = argparse.ArgumentParser(
        description='Lists pull/merge/change requests for github, gitlab,'
                    ' pagure and gerrit')
    default_config = os.path.expanduser('~/.reviewrot.yaml')
    parser.add_argument('-c', '--config',
                        default=default_config,
                        help='Configuration file to use')
    parser.add_argument('-s', '--state',
                        default=None,
                        choices=state_choices,
                        help="Pull requests state 'older' or 'newer'"
                        )
    parser.add_argument('-v', '--value',
                        default=None,
                        type=int,
                        help='Pull requests duration in terms of value(int)'
                        )
    parser.add_argument('-d', '--duration',
                        default=None,
                        choices=duration_choices,
                        help='Pull requests duration in terms of y=years,'
                             'm=months, d=days, h=hours, min=minutes')
    parser.add_argument('-f', '--format',
                        default=None,
                        choices=format_choices,
                        help='Choose from one of a few different styles')
    parser.add_argument('--show-last-comment',
                        nargs='?',
                        metavar="DAYS",
                        default=None,
                        const=0,
                        type=int,
                        help='Show text of last comment and '
                             'filter out pull requests in which '
                             'last comments are newer than '
                             'specified number of days')
    parser.add_argument('--reverse', action='store_true',
                        help='Display results with the most recent first')
    # With --sort argument added,  --comment-sort is kept for backwards
    # compatibility. Use --sort commented instead.
    parser.add_argument('--comment-sort', action='store_true',
                        help=argparse.SUPPRESS)
    # Default value is left as None to ensure that the argument passed here
    # takes precedence over the value in configuration arguments.
    parser.add_argument('--sort',
                        default=None,
                        choices=choices['sort'],
                        help=('Display results sorted by the chosen event '
                              'time. Defaults to '
                              '{}').format(choices['sort'][0]))
    parser.add_argument('--debug', action='store_true',
                        help='Display debug logs on console')
    parser.add_argument('--email', nargs="+",
                        default=None,
                        help='send output to list of email adresses')
    parser.add_argument('--irc', nargs='+',
                        metavar="CHANNEL",
                        default=None,
                        help='send output to list of irc channels')

    ssl_group = parser.add_argument_group('SSL')
    ssl_group.add_argument('-k', '--insecure',
                           default=False,
                           action='store_true',
                           help='Disable SSL certificate verification '
                                '(not recommended)')
    ssl_group.add_argument('--cacert',
                           default=None,
                           help='Path to CA certificate to use for SSL '
                                'certificate verification')

    args = parser.parse_args()
    options = (args.state, args.value, args.duration)
    if any(options) and not all(options):
        parser.error('Either no or all arguments are required')

    main(args, choices)
