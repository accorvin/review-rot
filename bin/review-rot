#!/usr/bin/env python

import argparse
import logging
import operator
import os
from os.path import expanduser, expandvars
import urllib

from reviewrot import get_git_service, GerritService

import yaml

# Characters to include at the beginning and end of reports
report_prefixes = {'oneline': '', 'indented': '', 'json': '['}
report_suffixes = {'oneline': '', 'indented': '', 'json': ']'}


def main(state_, value, duration, ssl_verify=None):
    """
    Reads input configuration file.
    Calls appropriate git service with suitable inputs.

    state_ (str): The filter(state) for review requests, e.g, older or newer
    value (int): The value in terms of duration for requests
                 to be older or newer than
    duration (str): The duration in terms of period(year,month,hour,minute)
                    for requests to be older or newer than.
    """
    log = logging.getLogger('review-rot')
    home = expanduser('~')

    path_to_config = os.path.join(home, '.reviewrot.yaml')
    if not os.path.exists(path_to_config):
        raise RuntimeError("No config '.reviewrot.yaml' provided. Please"
                           " specify it in home directory: %s" % home)
    # read input from home directory for pull requests
    with open(path_to_config, 'r') as f:
        config = yaml.load(f)

    results = []
    for item in config:
        if 'type' not in item:
            log.debug('git service type not found for %s', item)
            raise KeyError('git service not found for %s' % item)

        # get git service
        git_service = get_git_service(item['type'])

        # use configuration SSL settings by default, override with argument
        if ssl_verify is None and 'ssl_verify' in item:
            ssl_verify = item['ssl_verify']
            # expand ~, environment variables, etc if it's a path
            if not isinstance(ssl_verify, bool):
                ssl_verify = expanduser(expandvars(ssl_verify))
            log.debug('Using ssl_verify value "%s" from configuration',
                      ssl_verify)

        """
        check if username and/or repository information is given for
        specified git service
        """
        if item['repos'] is not None:
            # for each input call specified git service
            for data in item['repos']:
                """
                split and format username and repository name to further
                request pull requests
                """
                res = format_user_repo_name(data, git_service)
                """
                get pull/merge/change requests for specified git service
                """
                results.extend(
                    git_service.request_reviews(
                        user_name=res.get('user_name'),
                        repo_name=res.get('repo_name'),
                        state_=state_,
                        value=value,
                        duration=duration,
                        token=item.get('token'),
                        host=item.get('host'),
                        ssl_verify=ssl_verify,
                    )
                )

    # Now, with all results in place, sort them and print
    sorted_results = sorted(
        results,
        key=operator.attrgetter('time'),
        reverse=args.reverse,
    )

    N = len(results)
    print(report_prefixes[args.format])
    for i, result in enumerate(sorted_results):
        print(result.format(style=args.format, i=i, N=N))
    print(report_suffixes[args.format])


def format_user_repo_name(data, git_service):
    """
    Takes input from configuration file for a specified git service.
    Split or format it as required.
    Args:
        data (str): combination of username and/or reponame
        git_service (BaseService) : Git service object
    Returns:
        Dictionary representation of username and reponame
    """
    user_name = None
    repo_name = None

    if isinstance(git_service, GerritService):
        # convert "/" if any into escape character for html request
        repo_name = urllib.quote_plus(data)
    elif '/' in data:
        # Splitting only once in case "/" is a valid character in the data.
        user_name, repo_name = data.split('/', 1)
    else:
        user_name = data

    return {'user_name': user_name, 'repo_name': repo_name}

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Lists pull/merge/change requests for github, gitlab, pagure and gerrit')
    parser.add_argument('-s', '--state',
                        default=None,
                        choices=['older', 'newer'],
                        help="Pull requests state 'older' or 'newer'"
                        )
    parser.add_argument('-v', '--value',
                        default=None,
                        type=int,
                        help='Pull requests duration in terms of value(int)'
                        )
    parser.add_argument('-d', '--duration',
                        default=None,
                        choices=['y', 'm', 'd', 'h', 'min'],
                        help='Pull requests duration in terms of y=years,'
                             'm=months, d=days, h=hours, min=minutes')
    parser.add_argument('-f', '--format',
                        default='oneline',
                        choices=['oneline', 'indented', 'json'],
                        help='Choose from one of a few different styles.')
    parser.add_argument('--reverse', action='store_true',
                        help='Display results with the latest first.')
    parser.add_argument('--debug', action='store_true',
                        help='Display debug logs on console')

    ssl_group = parser.add_argument_group('SSL')
    ssl_group.add_argument('-k', '--insecure',
                           default=False,
                           action='store_true',
                           help='Disable SSL certificate verification '
                                '(not recommended).')
    ssl_group.add_argument('--cacert',
                           default=None,
                           type=open,
                           help='Path to CA certificate to use for SSL '
                                'certificate verification.')

    args = parser.parse_args()
    options = (args.state, args.value, args.duration)
    if any(options) and not all(options):
        parser.error('Either no or all arguments are required')

    if args.debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    main(state_=args.state, value=args.value, duration=args.duration,
         ssl_verify=False if args.insecure else args.cacert)
